{"version":3,"file":"static/js/7275.594d7a4f.chunk.js","mappings":"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","sources":["app/modules/common/navSettings/system/components/SystemGeneral.js","app/modules/common/navSettings/system/components/SettingsSystemSidebar.js","app/modules/common/navSettings/system/components/TestServerEmailModal.js","app/modules/common/navSettings/system/components/SystemEmails.js","app/modules/common/navSettings/system/components/SystemNotification.js","app/modules/common/navSettings/system/SettingSystemPage.js"],"sourcesContent":["import React from 'react'\n\nconst SystemGeneral = () => {\n  return (\n    <div>SystemGeneral</div>\n  )\n}\n\nexport default SystemGeneral","import React from 'react'\nimport {fontsFamily} from '../../../../../../assets/fonts/fonts'\nimport {useLocation, useNavigate} from 'react-router'\nimport {KTSVG} from '../../../../../../_metronic/helpers'\n\nconst SettingsSystemSidebar = () => {\n    const navigate = useNavigate()\n    const {pathname} = useLocation()\n    return (\n        <div\n            className='bg-cmwhite shadow-sm h-100 px-2 py-5 text-cmGrey600'\n            style={{\n                borderRadius: 10,\n                fontFamily: fontsFamily.manrope,\n                fontSize: '14px',\n                fontWeight: 600,\n            }}\n        >\n            <div className='text-cmGrey600 ps-4 mb-5' style={{fontSize: '16px'}}>\n                SYSTEM\n            </div>\n            <div\n                className='d-flex flex-xxl-column gap-2 flex-wrap'\n                style={{fontSize: 16, fontWeight: 600}}\n            >\n                {/* 1 */}\n                <div\n                    className={`${\n                        pathname.includes('general') ? 'bg-cmBlue-Crayola' : ''\n                    }  bg-opacity-10 px-3 py-3 d-flex gap-3 align-items-center cursor-pointer text-cmGrey700 w-100`}\n                    style={{borderRadius: 10}}\n                    onClick={() => navigate('general')}\n                >\n                    <KTSVG\n                        path='/media/icons/duotune/art/setting-general.svg'\n                        className='cursor-pointer'\n                        svgClassName='w-20px h-20px'\n                    />\n                    <div>General</div>\n                </div>\n                {/* 2 */}\n                <div\n                    className={`${\n                        pathname.includes('emails') ? 'bg-cmBlue-Crayola' : ''\n                    }  bg-opacity-10 py-3 px-3 d-flex gap-3 align-items-center cursor-pointer text-cmGrey700 w-100`}\n                    style={{borderRadius: 10}}\n                    onClick={() => navigate('emails')}\n                >\n                    <KTSVG\n                        path='/media/icons/duotune/art/sms-tracking.svg'\n                        className='cursor-pointer'\n                        svgClassName='w-20px h-20px'\n                    />\n                    <div>Emails</div>\n                </div>\n                {/* 3 */}\n                <div\n                    className={`${\n                        pathname.includes('notification') ? 'bg-cmBlue-Crayola' : ''\n                    }  bg-opacity-10 py-3 px-3 d-flex gap-3 align-items-center cursor-pointer text-cmGrey700 w-100`}\n                    style={{borderRadius: 10}}\n                    onClick={() => navigate('notification')}\n                >\n                    <KTSVG\n                        path='/media/icons/duotune/art/notification.svg'\n                        className='cursor-pointer'\n                        svgClassName='w-20px h-20px'\n                    />\n                    <div>Notification</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsSystemSidebar\n","import React, {useCallback, useState} from 'react'\n\nimport {testEmailSettingService} from '../../../../../../services/Services'\nimport CustomModal from '../../../../../../customComponents/customModal/CustomModal'\nimport {fontsFamily} from '../../../../../../assets/fonts/fonts'\nimport CustomInput, {\n    INPUT_TYPE,\n} from '../../../../../../customComponents/customInputs/customInput/CustomInput'\nimport CustomButton, {\n    BUTTON_SIZE,\n    BUTTON_TYPE,\n} from '../../../../../../customComponents/customButtton/CustomButton'\nimport {getErrorMessageFromResponse} from '../../../../../../helpers/CommonHelpers'\nimport CustomToast from '../../../../../../customComponents/customToast/CustomToast'\n\nconst TestServerEmailModal = ({show, handleClose}) => {\n    const [emailValue, setEmailValue] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n    const onTestEmail = useCallback(() => {\n        if (!emailValue) return setError('Enter Email Address')\n        if (!isValidEmail(emailValue)) return setError('Enter Valid Email Address')\n        setLoading(true)\n        const body = {\n            email: emailValue,\n        }\n        testEmailSettingService(body)\n            .then(() => {\n                handleClose()\n                CustomToast.success('Email Sent Successfully')\n            })\n            .catch((e) => {\n                CustomToast.error(getErrorMessageFromResponse(e))\n            })\n            .finally(() => setLoading(false))\n    }, [emailValue, handleClose])\n    const isValidEmail = (email) => {\n        return /\\S+@\\S+\\.\\S+/.test(email)\n    }\n\n    const onChangeEmail = (e) => {\n        setError(null)\n        setEmailValue(e.target.value)\n    }\n\n    return (\n        <CustomModal show={show} onHide={handleClose} maxWidth='800' title={`Send Test Email`}>\n            <div className='w-sm-75 mx-auto' style={{fontFamily: fontsFamily.manrope}}>\n                {/* body */}\n                <div className='mb-15'>\n                    <div>\n                        <CustomInput\n                            label={'Add email address to send test email'}\n                            type={INPUT_TYPE.email}\n                            value={emailValue}\n                            onChange={onChangeEmail}\n                            errorMessage={error}\n                        />\n                    </div>\n                </div>\n                {/* footer */}\n                <div className='d-flex flex-center gap-sm-10 gap-5'>\n                    <CustomButton\n                        buttonLabel='Cancel'\n                        buttonType={BUTTON_TYPE.primaryBorder}\n                        buttonSize={BUTTON_SIZE.large}\n                        padding={'px-sm-15'}\n                        onClick={handleClose}\n                    />\n                    <CustomButton\n                        buttonLabel='Send Test'\n                        buttonSize={BUTTON_SIZE.large}\n                        padding={'px-sm-15'}\n                        onClick={onTestEmail}\n                        loading={loading}\n                    />\n                </div>\n            </div>\n        </CustomModal>\n    )\n}\n\nexport default TestServerEmailModal\n","import React, {useCallback, useEffect, useState} from 'react'\nimport {fontsFamily} from '../../../../../../assets/fonts/fonts'\nimport CustomInput, {\n    INPUT_TYPE,\n} from '../../../../../../customComponents/customInputs/customInput/CustomInput'\nimport CustomDropdown from '../../../../../../customComponents/customInputs/customDropdown/CustomDropdown'\nimport CustomCheckbox from '../../../../../../customComponents/customCheckbox/CustomCheckbox'\nimport CustomButton, {\n    BUTTON_SIZE,\n    BUTTON_TYPE,\n} from '../../../../../../customComponents/customButtton/CustomButton'\nimport {\n    emailSettingService,\n    getSettingService,\n    testEmailSettingService,\n} from '../../../../../../services/Services'\nimport {\n    AUTHENTICATION_OPTIONS,\n    PROTOCAL_OPTIONS,\n    PROVIDER_OPTIONS,\n    SECURITY_PROTOCOL_OPTIONS,\n} from '../../../../../../constants/constants'\nimport CustomToast from '../../../../../../customComponents/customToast/CustomToast'\nimport {getErrorMessageFromResponse} from '../../../../../../helpers/CommonHelpers'\nimport CustomLoader from '../../../../../../customComponents/customLoader/CustomLoader'\nimport useValidation from '../../../../../../hooks/useValidation'\nimport {addEmailSettingValidation} from '../../../../../../validations/validations'\nimport TestServerEmailModal from './TestServerEmailModal'\n\nconst INITIAL_DATA = {\n    email_from_address: null,\n    service_provider: null,\n    protocal: null,\n    host_name: null,\n    smtp_port: null,\n    timeout: null,\n    security_protocol: null,\n    authentication_method: null,\n    token_app_id: null,\n    token_app_key: null,\n    mail_user_name: null,\n    mail_password: null,\n}\n\nconst SystemEmails = () => {\n    const [loading, setLoading] = useState(false)\n    const [fullLoading, setFullLoading] = useState(false)\n    const [emailConfigurationData, setEmailConfigurationData] = useState(INITIAL_DATA)\n    const [validateEmailData, emailSettingErrorData] = useValidation()\n    const [openTestEmailModal, setOpenTestEmailModal] = useState(false)\n\n    useEffect(() => {\n        getEmailConfigurationData()\n    }, [])\n\n    useEffect(() => {\n        if (validateEmailData?.beginValidating) {\n            validateEmailData(addEmailSettingValidation(emailConfigurationData))\n        }\n    }, [emailConfigurationData, validateEmailData])\n\n    const getEmailConfigurationData = useCallback(() => {\n        setFullLoading(true)\n        getSettingService()\n            .then((res) => {\n                setEmailConfigurationData({...emailConfigurationData, ...res.data})\n            })\n            .finally(() => {\n                setFullLoading(false)\n            })\n    }, [])\n\n    const handleInput = (e) => {\n        setEmailConfigurationData((val) => ({\n            ...val,\n            [e?.target?.name]: e?.target?.value,\n        }))\n    }\n\n    const onSaveEmailSetup = useCallback(() => {\n        const body = {...emailConfigurationData}\n        validateEmailData(addEmailSettingValidation(body)).then((res) => {\n            if (res.isValidate) {\n                setLoading(true)\n\n                emailSettingService(body)\n                    .then(() => {\n                        getEmailConfigurationData()\n                        CustomToast.success('Email Configured')\n                        // setEmailConfigurationData(INITIAL_DATA)\n                    })\n                    .catch((e) => {\n                        CustomToast.error(getErrorMessageFromResponse(e))\n                    })\n                    .finally(() => setLoading(false))\n            }\n        })\n    }, [emailConfigurationData, getEmailConfigurationData, validateEmailData])\n\n    const handleTestEmail = () => {\n        setOpenTestEmailModal(!openTestEmailModal)\n    }\n\n    return (\n        <div\n            className=''\n            style={{\n                fontSize: 14,\n                fontWeight: 600,\n                fontFamily: fontsFamily.manrop,\n                position: 'relative',\n            }}\n        >\n            <CustomLoader full visible={fullLoading} />\n\n            {/* <div className='shadow-sm bg-cmwhite mb-10' style={{borderRadius: 10}}>\n                <div className='text-cmGrey900 pt-3 ps-10 pb-5' style={{fontSize: 16}}>\n                    Email Settings\n                </div>\n                <div className='row container mx-auto px-sm-20 py-5'>\n                    <div className='col-sm-3 text-cmGrey700'>Send Email via:</div>\n                    <div className='col-sm text-decoration-underline text-cmBlue-Crayola cursor-pointer'>\n                        Add SMTP Email Server\n                    </div>\n                </div>\n                <div className='bg-strip py-5 text-strip'>.</div>\n\n                <div className='px-sm-20 py-5 text-cmGrey900' style={{fontSize: 16}}>\n                    General Settings for emails\n                </div>\n                <div className='row container px-sm-20 py-5 bg-strip mx-auto'>\n                    <div className='col-sm text-cmGrey700'>\n                        Remove Sequifi branding from all emails:\n                    </div>\n                    <div className='col-sm  form-switch form-check-custom form-check-solid'>\n                        <input\n                            className='cursor-pointer form-check-input h-20px w-35px '\n                            type='checkbox'\n                            value=''\n                            id='flexSwitchDefault'\n                            checked={null}\n                            onChange={() => null}\n                        />\n                    </div>\n                </div>\n\n                <div className='row container px-sm-20 py-5 mx-auto'>\n                    <div className='col-sm text-cmGrey700'>\n                        Send software emails to all Superadmins\n                    </div>\n                    <div className='col-sm  form-switch form-check-custom form-check-solid'>\n                        <input\n                            className='cursor-pointer form-check-input h-20px w-35px '\n                            type='checkbox'\n                            value=''\n                            id='flexSwitchDefault'\n                            checked={null}\n                            onChange={() => null}\n                        />\n                    </div>\n                </div>\n                <div className='row container px-sm-20 py-5 mx-auto bg-strip'>\n                    <div className='col-sm text-cmGrey700'>\n                        Do not sent emails for leads that are added manually\n                    </div>\n                    <div className='col-sm  form-switch form-check-custom form-check-solid'>\n                        <input\n                            className='cursor-pointer form-check-input h-20px w-35px '\n                            type='checkbox'\n                            value=''\n                            id='flexSwitchDefault'\n                            checked={null}\n                            onChange={() => null}\n                        />\n                    </div>\n                </div>\n                <div className='row container px-sm-20 py-5 mx-auto'>\n                    <div className='col-sm text-cmGrey700'>More settings coming soon</div>\n                    <div className='col-sm  form-switch form-check-custom form-check-solid'>\n                        <input\n                            className='cursor-pointer form-check-input h-20px w-35px '\n                            type='checkbox'\n                            value=''\n                            id='flexSwitchDefault'\n                            checked={null}\n                            onChange={() => null}\n                        />\n                    </div>\n                </div>\n            </div> */}\n            <div className='shadow-sm bg-cmwhite p-5' style={{borderRadius: 10}}>\n                <div className='text-cmGrey700 ms-sm-20 mb-10'>\n                    Use this page to add a SMTP mail server. This designated server will be used for\n                    all outgoing emails from Sequifi.\n                </div>\n                <div className='w-sm-50 mx-auto mb-10'>\n                    <CustomInput\n                        label={'From address'}\n                        placeholder='Enter address'\n                        onChange={handleInput}\n                        value={emailConfigurationData?.email_from_address}\n                        name='email_from_address'\n                        errorMessage={emailSettingErrorData?.email_from_address}\n                    />\n                    <div className='text-cmGrey600' style={{fontSize: 12}}>\n                        The default address this server will use to send emails from\n                    </div>\n                </div>\n                <div className='ms-sm-20 mb-10'>\n                    <div className='text-black mb-3' style={{fontSize: 16, fontWeight: 700}}>\n                        Server Details\n                    </div>\n                    <div className='text-cmGrey700'>\n                        Enter either the host name of your SMTP server ot the JNDI location of a\n                        javax.mail.session object to use.\n                    </div>\n                </div>\n                <div className='w-sm-50 mx-auto'>\n                    <div className='text-black mb-3' style={{fontSize: 16, fontWeight: 700}}>\n                        SMTP Host\n                    </div>\n                    <div className='row mb-5'>\n                        <div className='col-sm'>\n                            <CustomDropdown\n                                label={'Service Provider'}\n                                value={emailConfigurationData?.service_provider}\n                                onChange={handleInput}\n                                options={PROVIDER_OPTIONS}\n                                searching={false}\n                                name={'service_provider'}\n                                errorMessage={emailSettingErrorData?.service_provider}\n                            />\n                        </div>\n                        <div className='col-sm'>\n                            <CustomDropdown\n                                label={'Protocol'}\n                                value={emailConfigurationData?.protocal}\n                                onChange={handleInput}\n                                options={PROTOCAL_OPTIONS}\n                                searching={false}\n                                name={'protocal'}\n                                errorMessage={emailSettingErrorData?.protocal}\n                            />\n                        </div>\n                    </div>\n                    <div className='mb-5'>\n                        <CustomInput\n                            type={INPUT_TYPE.text}\n                            label={'Host Name'}\n                            onChange={handleInput}\n                            value={emailConfigurationData?.host_name}\n                            name='host_name'\n                            errorMessage={emailSettingErrorData?.host_name}\n                        />\n                        <div className='text-cmGrey600' style={{fontSize: 12}}>\n                            The SMTP host name of your mail server\n                        </div>\n                    </div>\n\n                    <div className='mb-5'>\n                        <CustomInput\n                            label={'SMTP Port'}\n                            type={INPUT_TYPE.number}\n                            onChange={handleInput}\n                            value={emailConfigurationData?.smtp_port}\n                            name='smtp_port'\n                            errorMessage={emailSettingErrorData?.smtp_port}\n                        />\n                        <div className='text-cmGrey600' style={{fontSize: 12}}>\n                            Optional - SMTP port number to use. Leave black for detail (defaults:\n                            SMTP - 25, SMTPS - 465).\n                        </div>\n                    </div>\n\n                    <div className='mb-5'>\n                        <CustomInput\n                            type={INPUT_TYPE.number}\n                            label={'Timeout (ms)'}\n                            onChange={handleInput}\n                            value={emailConfigurationData?.timeout}\n                            name='timeout'\n                            errorMessage={emailSettingErrorData?.timeout}\n                        />\n                        <div className='text-cmGrey600' style={{fontSize: 12}}>\n                            Timeout for every request sent from Sequifi to mail server.Leave the\n                            default or enter 0 for no timeout.\n                        </div>\n                    </div>\n                    <div className='d-flex align-items-center gap-5 mb-5'>\n                        {/* <div className='text-cmGrey700'>TLS.</div>\n\n                        <CustomCheckbox />\n                        <div className='text-cmGrey700' style={{fontSize: 12}}>\n                            Optional - the mail server requires the use of TLS security.\n                        </div> */}\n                        <CustomDropdown\n                            label={'Security Protocol'}\n                            value={emailConfigurationData?.security_protocol}\n                            onChange={handleInput}\n                            options={SECURITY_PROTOCOL_OPTIONS}\n                            searching={false}\n                            name={'security_protocol'}\n                            errorMessage={emailSettingErrorData?.security_protocol}\n                        />\n                    </div>\n                    <div className='mb-5'>\n                        <CustomDropdown\n                            label={'Authentication method'}\n                            value={emailConfigurationData?.authentication_method}\n                            onChange={handleInput}\n                            options={AUTHENTICATION_OPTIONS}\n                            searching={false}\n                            name={'authentication_method'}\n                            errorMessage={emailSettingErrorData?.authentication_method}\n                        />\n                    </div>\n\n                    {emailConfigurationData?.authentication_method == 'user_name/password' ? (\n                        <div className='mb-sm-20 mb-10'>\n                            {/* <CustomDropdown label={'Username'} /> */}\n                            <CustomInput\n                                type={INPUT_TYPE.text}\n                                label={'Username'}\n                                onChange={handleInput}\n                                value={emailConfigurationData?.mail_user_name}\n                                name='mail_user_name'\n                                errorMessage={emailSettingErrorData?.mail_user_name}\n                            />\n                            <div className='text-cmGrey600' style={{fontSize: 12}}>\n                                Optional - if you use authenticated SMTP to send email, enter your\n                                username.\n                            </div>\n                            <div className='mt-3'>\n                                <CustomInput\n                                    type={INPUT_TYPE.password}\n                                    label={'Password'}\n                                    onChange={handleInput}\n                                    value={emailConfigurationData?.mail_password}\n                                    name='mail_password'\n                                    errorMessage={emailSettingErrorData?.mail_password}\n                                />\n                            </div>\n                        </div>\n                    ) : null}\n                    {emailConfigurationData?.authentication_method == 'token' ? (\n                        <div className='mb-sm-20 mb-10'>\n                            {/* <CustomDropdown label={'Username'} /> */}\n                            <CustomInput\n                                type={INPUT_TYPE.text}\n                                label={'Token App ID'}\n                                onChange={handleInput}\n                                value={emailConfigurationData?.token_app_id}\n                                name='token_app_id'\n                                errorMessage={emailSettingErrorData?.token_app_id}\n                            />\n\n                            <CustomInput\n                                type={INPUT_TYPE.password}\n                                label={'Token App Key'}\n                                onChange={handleInput}\n                                value={emailConfigurationData?.token_app_key}\n                                name='token_app_key'\n                                feedback={false}\n                                errorMessage={emailSettingErrorData?.token_app_key}\n                            />\n                        </div>\n                    ) : null}\n                    {/* <div className='text-center mb-10'>\n                        <CustomButton\n                            buttonLabel='Add Server'\n                            buttonSize={BUTTON_SIZE.large}\n                            padding={'px-15'}\n                            onClick={onSaveEmailSetup}\n                            loading={loading}\n                        />\n                    </div> */}\n                    <div className='d-flex gap-3 flex-center mb-10'>\n                        <CustomButton\n                            buttonLabel='Add Server'\n                            buttonSize={BUTTON_SIZE.large}\n                            padding={'px-15'}\n                            onClick={onSaveEmailSetup}\n                            loading={loading}\n                        />\n                        <CustomButton\n                            buttonLabel='Test Server'\n                            buttonSize={BUTTON_SIZE.large}\n                            padding={'px-15'}\n                            onClick={handleTestEmail}\n                            buttonType={BUTTON_TYPE.secondary}\n                            // loading={loading}\n                        />\n                    </div>\n                </div>\n            </div>\n            {emailConfigurationData?.id && openTestEmailModal ? (\n                <TestServerEmailModal show={openTestEmailModal} handleClose={handleTestEmail} />\n            ) : null}\n        </div>\n    )\n}\n\nexport default SystemEmails\n","import React from 'react'\n\nconst SystemNotification = () => {\n    return <div>SystemNotification</div>\n}\n\nexport default SystemNotification\n","import React, {useState} from 'react'\nimport {Navigate, Route, Routes} from 'react-router'\nimport {PageTitle} from '../../../../../_metronic/layout/core'\nimport SystemGeneral from './components/SystemGeneral'\nimport SettingsSystemSidebar from './components/SettingsSystemSidebar'\nimport SystemEmails from './components/SystemEmails'\nimport SystemNotification from './components/SystemNotification'\n\nconst profileBreadCrumbs = [\n    {\n        title: 'Settings/System/',\n        path: '/',\n        isSeparator: false,\n        isActive: false,\n    },\n]\n\nconst SettingSystemPage = () => {\n    return (\n        <>\n            <div className='d-xl-flex gap-5' style={{height: '75vh'}}>\n                <div className='w-xxl-15 w-xl-20 mb-xl-0 mb-5'>\n                    <SettingsSystemSidebar />\n                </div>\n                <div className='w-xxl-85 w-xl-80'>\n                    <Routes>\n                        <Route\n                            path='general'\n                            element={\n                                <>\n                                    <PageTitle breadcrumbs={profileBreadCrumbs}>General</PageTitle>\n                                    <SystemGeneral />\n                                </>\n                            }\n                        />\n                        <Route\n                            path='emails'\n                            element={\n                                <>\n                                    <PageTitle breadcrumbs={profileBreadCrumbs}>Emails</PageTitle>\n                                    <SystemEmails />\n                                </>\n                            }\n                        />\n\n                        <Route\n                            path='notification'\n                            element={\n                                <>\n                                    <PageTitle breadcrumbs={profileBreadCrumbs}>General</PageTitle>\n                                    <SystemNotification />\n                                </>\n                            }\n                        />\n\n                        <Route index element={<Navigate to='/settings' />} />\n                    </Routes>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default SettingSystemPage\n"],"names":["SystemGeneral","_jsx","children","SettingsSystemSidebar","navigate","useNavigate","pathname","useLocation","_jsxs","className","style","borderRadius","fontFamily","fontsFamily","fontSize","fontWeight","concat","includes","onClick","KTSVG","path","svgClassName","_ref","show","handleClose","emailValue","setEmailValue","useState","loading","setLoading","error","setError","onTestEmail","useCallback","isValidEmail","body","email","testEmailSettingService","then","CustomToast","catch","e","getErrorMessageFromResponse","finally","test","CustomModal","onHide","maxWidth","title","CustomInput","label","type","INPUT_TYPE","value","onChange","target","errorMessage","CustomButton","buttonLabel","buttonType","BUTTON_TYPE","buttonSize","BUTTON_SIZE","padding","INITIAL_DATA","email_from_address","service_provider","protocal","host_name","smtp_port","timeout","security_protocol","authentication_method","token_app_id","token_app_key","mail_user_name","mail_password","SystemEmails","fullLoading","setFullLoading","emailConfigurationData","setEmailConfigurationData","validateEmailData","emailSettingErrorData","useValidation","openTestEmailModal","setOpenTestEmailModal","useEffect","getEmailConfigurationData","beginValidating","addEmailSettingValidation","getSettingService","res","data","handleInput","val","_e$target","_e$target2","name","onSaveEmailSetup","isValidate","emailSettingService","handleTestEmail","position","CustomLoader","full","visible","placeholder","CustomDropdown","options","PROVIDER_OPTIONS","searching","PROTOCAL_OPTIONS","SECURITY_PROTOCOL_OPTIONS","AUTHENTICATION_OPTIONS","feedback","id","TestServerEmailModal","SystemNotification","profileBreadCrumbs","isSeparator","isActive","SettingSystemPage","_Fragment","height","Routes","Route","element","PageTitle","breadcrumbs","index","Navigate","to"],"sourceRoot":""}